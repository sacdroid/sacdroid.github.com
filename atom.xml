<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Techno]]></title>
  <link href="http://sacdroid.github.com/atom.xml" rel="self"/>
  <link href="http://sacdroid.github.com/"/>
  <updated>2012-07-03T18:03:16+05:30</updated>
  <id>http://sacdroid.github.com/</id>
  <author>
    <name><![CDATA[Sachin Patil]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My ubuntu (8.10) experience :)]]></title>
    <link href="http://sacdroid.github.com/blog/2008/11/29/my-ubuntu-810-experience/"/>
    <updated>2008-11-29T19:59:00+05:30</updated>
    <id>http://sacdroid.github.com/blog/2008/11/29/my-ubuntu-810-experience</id>
    <content type="html"><![CDATA[<div class='post'>
Its been 15 days today since I became completely OPEN SOURCE.  Yes, I dumped windows XP and started using Ubuntu for full time development. These days, I am busy exploring new things in Ubuntu.<br />Believe me, in these days fifteen days, I never missed my old windows XP set up. I got alternative for each application which I use in my daytoday life for FREE of Cost with full support.<br />    Its been fantastic experience so far with Linux world. Today, I am going to share my experience  during my  Open source &#8220;revolution&#8221; phase, :).<ul><li>   As I am Java developer , First thing I looked for  setting up JDK on ubuntu.  Installing JDK was straight forward. I used this link, <a href="http://dambalah.com/2007/09/21/install-java-on-ubuntu/">Install Java on Ubuntu</a>, which is very well organized and clear.<br /></li><li> Eclipse 3.3 is not available in the Ubuntu repository yet (<a href="https://bugs.launchpad.net/debian/+source/eclipse/+bug/123064">progress</a>), and I need this version because the plugins (JBoss Tools) I&#8217;m using require it.      So you need download eclipse 3.3 froe eclipse.org and unzip it to any directory. The locations I used is /opt/eclipse.<br /><br />Now configuration for /opt/eclipse. Set Up java_home,<br /><br />sudo -b gedit /opt/eclipse/java_home<br /><br />and add<br /><br />/usr/lib/jvm/java-5-sun<br /><br />to the top of the file.<br /><br />You need adjust increase stack and heap sizes for eclipse/JVM to avoid OutOfMemoryError,<br />sudo -b gedit /opt/eclipse/eclipse.ini<br />The argument Xms refers to the minimum heap size and Xmx refers to the maximum heap size.<br /><br />adjust them as your memory size.<br /><p class="line874">create executable:                                                                                         Make a bin folder in your home directory, this will be used for the startup script: <span class="anchor" id="line-189"></span><span class="anchor" id="line-190"></span><span class="anchor" id="line-191"></span></p><pre>$ mkdir ~/bin</pre><span class="anchor" id="line-192"></span><span class="anchor" id="line-193"></span><p class="line862">Next create an executable for Eclipe at <tt>~/bin/eclipse</tt> with your favorite text editor by typing <tt>vi ~/bin/eclipse</tt> or <tt>nano ~/bin/eclipse</tt> into the command line. Add the following content: <span class="anchor" id="line-194"></span><span class="anchor" id="line-195"></span><span class="anchor" id="line-196"></span><span class="anchor" id="line-197"></span><span class="anchor" id="line-198"></span><span class="anchor" id="line-199"></span><span class="anchor" id="line-200"></span></p><pre>export MOZILLA_FIVE_HOME="/usr/lib/mozilla/"<br />export ECLIPSE_HOME="$HOME/opt/eclipse"<br /><br />$ECLIPSE_HOME/eclipse $*</pre><span class="anchor" id="line-201"></span><span class="anchor" id="line-202"></span><p class="line874">Finally, allow the script to be executed: <span class="anchor" id="line-203"></span><span class="anchor" id="line-204"></span><span class="anchor" id="line-205"></span></p><pre>$ chmod +x ~/bin/eclipse</pre></li><li>To be continued<br /></li></ul></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Maven 2 to download dependency sources]]></title>
    <link href="http://sacdroid.github.com/blog/2008/10/10/use-maven-2-to-download-dependency/"/>
    <updated>2008-10-10T12:32:00+05:30</updated>
    <id>http://sacdroid.github.com/blog/2008/10/10/use-maven-2-to-download-dependency</id>
    <content type="html"><![CDATA[<div class='post'>
There are two ways to download dependency source<br /><br />1)This will generate Eclipse project files with source code attached to eclipse classpath.<br /> >maven eclipse:eclipse -downloadSource=true<br /><br /> if you also want java documentation to be<br />added to your classpath, use,<br /><br />>maven eclipse:eclipse -downloadJavadoc=true.   <br /><br />2)If you are using some other IDE, use following maven target,<br />it will download source jars at local M2 repository.<br /><br />>mvn dependency:sources<br /><br />Maven rocks!!!</div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Neeraj</div>
<div class='content'>
Don&#8217;t get mislead by his mechanical engineering background.This guy has really got the ability to accomplish and contribute something great to software technology.I am sure with his own innovation and caliber, he is gonna rock the java world!!!</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Importing oracle dump file as sysdba.]]></title>
    <link href="http://sacdroid.github.com/blog/2008/09/12/importing-oracle-dump-file-as-sysdba/"/>
    <updated>2008-09-12T12:41:00+05:30</updated>
    <id>http://sacdroid.github.com/blog/2008/09/12/importing-oracle-dump-file-as-sysdba</id>
    <content type="html"><![CDATA[<div class='post'>
I wanted to import server dump file to my local system oracle 10g database,  I tried importing with following command on widnows command line,<br />D:\imp sys/password  file=test_stg.dmp fromuser=testusr04 touser=testusr04 <empty>commit=y<br />but it failed saying sys should be connected as sysdba,  hence  I modified it to<br />D:\imp sys/password  as sysdba file=</empty>test<empty>_stg.dmp fromuser=testusr04 touser=<empty> </empty></empty>testusr04 <empty><empty> commit=y<br />it did not work too.<br /><br />After bit of goggling I found following command which solved problem,<br /><br />D:\imp userid=&#8217;sys/password@test as sysdba&#8217; file=d:\test.dmp fromuser=</empty></empty>testusr04 <empty><empty> touser=</empty></empty>testusr04<br /><empty><empty><br />Hope it helps to someone like me, who is not database expert.<br /><br />&#8211;Sachin</empty></empty></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When to Synchronize]]></title>
    <link href="http://sacdroid.github.com/blog/2007/10/11/when-to-synchronize/"/>
    <updated>2007-10-11T12:56:00+05:30</updated>
    <id>http://sacdroid.github.com/blog/2007/10/11/when-to-synchronize</id>
    <content type="html"><![CDATA[<div class='post'>
Whenever I write a class in java , First question comes to my mind,  Do I need Synchronization here.  Sometimes, when writing a class, we don&#8217;t know if it is going to be used in a shared context or not. Should I add overhead of Synchronization  to this class?<br />  If you are in doubt I would prefer not to add Synchronization.  Because synchronization is too expensive in java. Even when a program contains only a single thread running on a single processor, a synchronized method call is still slower than an unsynchronized method call. If the synchronization actually requires maintaining the lock, the performance penalty is substantially greater, as there will be several thread switches and system calls required.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java concepts]]></title>
    <link href="http://sacdroid.github.com/blog/2007/10/11/java-concepts/"/>
    <updated>2007-10-11T12:11:00+05:30</updated>
    <id>http://sacdroid.github.com/blog/2007/10/11/java-concepts</id>
    <content type="html"><![CDATA[<div class='post'>
They are some interesting concepts which make java more interesting. I will<br />present series of articles which will explain these concepts.<br /><br />Concept 1,<br />Can you guess what will be printed on the screen?<br /><br />class Test<br />{<br />public static void main(String[] args) {<br />Test inst_test = new Test();<br />int i1 = 2000;<br />int i2 = 2000;<br />int i3 = 2;<br />int i4 = 2;<br />Integer Ithree = new Integer(2); // 1<br />Integer Ifour = new Integer(2); // 2<br />System.out.println( Ithree == Ifour );<br />inst_test.method( i3 , i4 );<br />inst_test.method( i1 , i2 );<br />}<br />public void method( Integer i , Integer eye )<br />{<br />System.out.println(i == eye );<br />}<br />}<br /><br />When I first saw this code I was confident that it will give out put as,<br />false<br />false.<br />because == compares hashCode, not the value for wrapper classes.<br /><br />But When I checked it with my IDE, Surprisingly it was giving out put as,<br />true<br />false.<br /><br />After a bit of googling I found the reason,<br /><br />Certain ranges of values of wrapper classes are stored as immutable objects by the Java Virtual Machine.<br />Normally, when the primitive types are boxed into the wrapper types, the JVM allocates memory and creates a new object. But for some special cases, the JVM reuses the same object. The following is the list of primitives stored as immutable objects:<br />* boolean values true and false<br />* All byte values<br />* short values between -128 and 127<br />* int values between -128 and 127<br />* char in the range \u0000 to \u007F</div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Vaibhav Tulsyan</div>
<div class='content'>
Awesome! :D</div>
</div>
<div class='comment'>
<div class='author'>Varsha</div>
<div class='content'>
Thanks for this post. I was not aware of this concept for Integers.</div>
</div>
<div class='comment'>
<div class='author'>Sachin6870</div>
<div class='content'>
== does compare hashcode,<br />but for int values between -128 and 127 hash code is same.</div>
</div>
<div class='comment'>
<div class='author'>mahesh</div>
<div class='content'>
class Test<br />{<br />public static void main(String[] args) {<br />Test inst_test = new Test();<br />int i1 = 130;<br />int i2 = 130;<br />int i3 = 2;<br />int i4 = 2;<br />Integer Ithree = new Integer(2); // 1<br />Integer Ifour = new Integer(2); // 2<br />System.out.println( Ithree.hashCode());<br />System.out.println( Ifour.hashCode());<br />inst_test.method( i3 , i4 );<br />inst_test.method( i1 , i2 );<br />}<br />public void method( Integer i , Integer eye )<br />{<br /> System.out.println( i.hashCode() == eye.hashCode());<br /> <br /> System.out.println( i == eye );<br /><br />}<br />}<br /><br />This shows that == does not checks hashCode.Isn&#8217;t it.</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
